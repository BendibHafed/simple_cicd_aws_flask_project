name: CD pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Python for tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Install dependencies & run tests
      - name: Install dependencies
        working-directory: app
        run: pip install -r requirements.txt
      
      # 4. Run tests
      - name: Run tests
        working-directory: app
        run: pytest
      
      # 5. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2   # keep consistent with destroy.yml
      
      # 6. Package Flask app into zip for Lambda
      - name: Download Artifact (if available)
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: app.zip
        continue-on-error: true  # Allows first-time deploys
        
      - name: Rebuild Package (if no artifact)
        if: ${{ !success() }}  # Only run if download failed
        working-directory: app
        run: |
          rm -rf package && mkdir package
          pip install -r requirements.txt -t package
          cp *.py package/
          (cd package && zip -r ../../app.zip . -x "*__pycache__*" "tests/*")

      # 7. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} 

      # 8. Bootstraps S3 + DynamoDB backend if missing
      - name: Ensure Terraform Backend Exists
        run: |
          BUCKET="my-terraform-state-bucket-HE1"
          REGION=${{ secrets.AWS_REGION }}
          DYNAMO_TABLE="terraform-locks"
          
          echo "Checking S3 bucket..."
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET" \
              --server-side-encryption-configuration '{
                "Rules": [{
                  "ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}
                }]
              }'
          else
            echo "Bucket exists"
          fi
          
          echo "Checking DynamoDB table..."
          if ! aws dynamodb describe-table --table-name "$DYNAMO_TABLE" --region "$REGION" 2>/dev/null; then
            echo "Table does not exist. Creating..."
            aws dynamodb create-table \
              --table-name "$DYNAMO_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
          else
            echo "DynamoDB table exists"
          fi

      # 9. Terraform Init & Apply
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # 9. Get API Gateway URL
      - name: Show API Gateway URL
        working-directory: terraform
        run: terraform output api_url
