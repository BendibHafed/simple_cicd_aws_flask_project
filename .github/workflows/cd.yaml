name: CD pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout Repos
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Install dependencies & run tests
      - name: Install dependencies
        working-directory: app
        run: pip install --root-user-action=ignore -r requirements.txt

      - name: Run tests
        working-directory: app
        run: pytest

      # 4. Install and/or Update AWS CLI
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # 5. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      # 6. Build Lambda Package
      - name: Build Lambda Package
        working-directory: app
        run: |
          rm -rf package && mkdir package
          pip install --root-user-action=ignore -r requirements.txt -t package --no-cache-dir
          cp *.py package/
          mkdir -p ../terraform
          (cd package && zip -r ../../terraform/app.zip . -x "*__pycache__*" "tests/*")

      # 7. LocalStack setup (if ACT=true)
      - name: Start LocalStack
        if: ${{ env.ACT }}
        run: |
          pip install localstack awscli-local
          localstack start -d
          sleep 10
          awslocal s3 ls || true

      - name: Configure Terraform Vars for LocalStack
        if: ${{ env.ACT }}
        run: |
          echo "TF_VAR_use_localstack=true" >> $GITHUB_ENV
          echo "TF_VAR_aws_access_key=test" >> $GITHUB_ENV
          echo "TF_VAR_aws_secret_key=test" >> $GITHUB_ENV
          echo "TF_VAR_aws_region= ${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      # 8. Configure AWS credentials (GitHub Actions)
      - name: Configure AWS credentials
        if: ${{ !env.ACT }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test AWS credentials
        if: ${{ !env.ACT }}
        run: aws sts get-caller-identity

      # 9. Ensure Terraform Backend Exists (AWS uniquement)
      - name: Ensure Terraform Backend Exists
        if: ${{ !env.ACT }}
        run: |
          BUCKET="my-terraform-state-bucket-he1"
          REGION=${{ secrets.AWS_REGION }}
          DYNAMO_TABLE="terraform-locks"

          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION" || true
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}' || true
          fi

          if ! aws dynamodb describe-table --table-name "$DYNAMO_TABLE" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$DYNAMO_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
          fi

      # 10. Terraform Init (LocalStack)
      - name: Terraform Init (Local State)
        if: ${{ env.ACT }}
        working-directory: terraform
        run: |
          rm -rf .terraform .terraform.lock.hcl backend_override.tf
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          terraform init -reconfigure -input=false -no-color

      # 11. Terraform Init (AWS real S3 backend)
      - name: Terraform Init (AWS)
        if: ${{ !env.ACT }}
        working-directory: terraform
        run: terraform init -reconfigure -input=false

      # 12. Terraform Apply (AWS uniquement)
      - name: Terraform Apply
        if: ${{ !env.ACT }}
        working-directory: terraform
        run: terraform apply -auto-approve

      # 13. Show API Gateway URL
      - name: Show API Gateway URL
        working-directory: terraform
        run: terraform output api_gateway_url || echo "No output we are in LocalStack"
