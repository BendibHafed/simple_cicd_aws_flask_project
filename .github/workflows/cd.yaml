name: CD pipeline

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout Repos
        uses: actions/checkout@v4

      # 2. Setup Python for tests
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Install dependencies & run tests
      - name: Install dependencies
        working-directory: app
        run: pip install --root-user-action=ignore -r requirements.txt
      
      - name: Run tests
        working-directory: app
        run: pytest
      
      # 4. Install AWS CLI
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      # 5. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0   # version la plus rÃ©cente
      
      # 6. Build Lambda Package directly in terraform/
      - name: Build Lambda Package
        working-directory: app
        run: |
          rm -rf package && mkdir package
          pip install --root-user-action=ignore -r requirements.txt -t package --no-cache-dir
          cp *.py package/
          mkdir -p ../terraform 
          (cd package && zip -r ../../terraform/app.zip . -x "*__pycache__*" "tests/*")
      
      # --- LocalStack setup (only when running under ACT) ---
      - name: Start LocalStack
        if: ${{ env.ACT }}
        run: |
          pip install localstack awscli-local
          localstack start -d
          sleep 10
          awslocal s3 ls || true

      - name: Configure Terraform Vars for LocalStack
        if: ${{ env.ACT }}
        run: |
          echo "TF_VAR_use_localstack=true" >> $GITHUB_ENV
          echo "TF_VAR_aws_access_key=test" >> $GITHUB_ENV
          echo "TF_VAR_aws_secret_key=test" >> $GITHUB_ENV
          echo "TF_VAR_aws_region=us-east-1" >> $GITHUB_ENV

      # 7. Configure AWS credentials  Real AWS setup (only on GitHub cloud)
      - name: Configure AWS credentials
        if: ${{ !env.ACT }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure Terraform Backend Exists
        if: ${{ !env.ACT }}
        run: |
          BUCKET="my-terraform-state-bucket-he1"
          REGION=${{ secrets.AWS_REGION }}
          DYNAMO_TABLE="terraform-locks"

          echo "Checking S3 bucket..."
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket already exists!"
          else
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION" || true

            aws s3api put-bucket-encryption \
              --bucket "$BUCKET" \
              --server-side-encryption-configuration '{
                "Rules": [{
                  "ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}
                }]
              }' || true
          fi

          echo "Checking DynamoDB table..."
          if aws dynamodb describe-table --table-name "$DYNAMO_TABLE" --region "$REGION" >/dev/null 2>&1; then
            echo "DynamoDB table already exists!"
          else
            echo "Table does not exist. Creating..."
            aws dynamodb create-table \
              --table-name "$DYNAMO_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
          fi
      
      # --- Terraform Init (LocalStack) ---
      - name: Terraform Init (LocalStack)
        if: ${{ env.ACT }}
        working-directory: terraform
        run: |
          rm -rf .terraform .terraform.lock.hcl backend_override.tf
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          terraform init -reconfigure

      # --- Terraform Init (AWS real S3 backend) ---
      - name: Terraform Init (AWS)
        if: ${{ !env.ACT }}
        working-directory: terraform
        run: |
          rm -rf .terraform .terraform.lock.hcl backend_override.tf
          cat > backend_override.tf <<EOF
          terraform {
            backend "s3" {
              bucket         = "my-terraform-state-bucket-he1"
              key            = "flask-app/terraform.tfstate"
              region         = "eu-west-3"
              encrypt        = true
              dynamodb_table = "terraform-locks"
            }
          }
          EOF
          terraform init -reconfigure


      - name: Terraform Apply
        if: ${{ !env.ACT }}
        working-directory: terraform
        run: terraform apply -auto-approve

      # 10. Show API Gateway URL
      - name: Show API Gateway URL
        working-directory: terraform
        run: terraform output api_url || echo "No output (maybe LocalStack)"
